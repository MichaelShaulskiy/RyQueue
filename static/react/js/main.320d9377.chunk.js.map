{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QVideoCard","vidTitle","vidDescr","Card","style","width","Img","variant","src","Body","Title","Text","Button","App","videos","Container","Form","Control","type","id","Row","map","video","Col","title","description","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAkDA,SAASA,EAAT,GAA4C,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SAC9B,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAI,uBAC5B,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KAAaT,GACb,kBAACE,EAAA,EAAKQ,KAAN,KAAYT,GACZ,kBAACU,EAAA,EAAD,CAAQL,QAAQ,WAAhB,eAqBOM,MAff,YAA0B,IAAXC,EAAU,EAAVA,OACb,OACE,kBAACC,EAAA,EAAD,KACE,oDACA,2DACA,kBAACC,EAAA,EAAKC,QAAN,CAAcC,KAAK,QAAQC,GAAG,cAC9B,kBAACP,EAAA,EAAD,CAAQL,QAAQ,UAAUY,GAAG,kBAA7B,YACA,kBAACC,EAAA,EAAD,KACGN,EAAOO,KAAI,SAAAC,GAAK,OAAI,kBAACC,EAAA,EAAD,KAAK,kBAACvB,EAAD,CAAYC,SAAUqB,EAAME,MAAOtB,SAAUoB,EAAMG,qBC3DjEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKnB,OAPU,CACjB,CAACU,MAAO,QAASC,YAAa,QAC9B,CAACD,MAAO,MAAOC,YAAa,YAO5BS,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.320d9377.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Card from \"react-bootstrap/Card\";\n\nimport './App.css';\n\nlet queuedVideos = [\n  {title: \"Hallo\", description: \"Welt\"},\n  {title: \"Was\", description: \"Geht\"}\n]\n\nfunction QVideo() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        Launch Modal\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Video Titel</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Video Beschreibung\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  )\n}\n\nfunction QVideoCard({ vidTitle, vidDescr }){\n  return (\n    <Card style={{ width: '18rem' }}>\n      <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n      <Card.Body>\n        <Card.Title>{vidTitle}</Card.Title>\n        <Card.Text>{vidDescr}</Card.Text>\n        <Button variant=\"primary\">Abbrechen</Button>\n      </Card.Body>\n    </Card>\n  );\n}\n\nfunction App({ videos }) {\n  return (\n    <Container>\n      <h1>Remote Youtube Queue</h1>\n      <p>Bitte einen Link einf√ºgen</p>\n      <Form.Control type=\"input\" id=\"linkField\"/>\n      <Button variant=\"primary\" id=\"downloadButton\">Download</Button>\n      <Row>\n        {videos.map(video => <Col><QVideoCard vidTitle={video.title} vidDescr={video.description}/></Col>)}\n      </Row>\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet queuedVideos = [\n  {title: \"Hallo\", description: \"Welt\"},\n  {title: \"Was\", description: \"Geht\"}\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App videos={queuedVideos}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}